{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red21\green98\blue39;\red246\green247\blue249;\red46\green49\blue51;
\red20\green67\blue174;\red186\green6\blue115;\red77\green80\blue85;\red162\green0\blue16;\red24\green25\blue27;
\red18\green115\blue126;}
{\*\expandedcolortbl;;\cssrgb\c7451\c45098\c20000;\cssrgb\c97255\c97647\c98039;\cssrgb\c23529\c25098\c26275;
\cssrgb\c9412\c35294\c73725;\cssrgb\c78824\c15294\c52549;\cssrgb\c37255\c38824\c40784;\cssrgb\c70196\c7843\c7059;\cssrgb\c12549\c12941\c14118;
\cssrgb\c3529\c52157\c56863;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * StatusWorkflow.gs\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * ================\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Part of 1PWR Procurement System\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Version: 1.2\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Last Updated: 2024-11-19\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Purpose:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * --------\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Manages the progression of Purchase Orders (POs) and Purchase Requisitions (PRs) through various statuses according to \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * defined business rules. Handles validation, notifications, authorization checks, and automated actions.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Integration Points:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * ------------------\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * - Code.gs: Uses CONFIG and COL constants for sheet structure\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * - NotificationSystem.gs: Sends status-related notifications\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * - DashboardWeb.html: Provides UI for status changes\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * - LandingDateUpdate.gs: Handles landing date modifications\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Sheet Dependencies:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * ------------------\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Master Log Tab Columns:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * - A: PO Number (COL.PO_NUMBER)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * - U: Status (COL.STATUS)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * - BA: Procurement Notes (COL.PROCUREMENT_NOTES)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Additional columns defined in COL constant from Code.gs\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Additional Required Sheets:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * - Audit Log: Records all status changes\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * - Notification Log: Tracks sent notifications\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Business Rules:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * --------------\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Status Flow:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Submitted \uc0\u8594  In Queue \u8594  Ordered \u8594  Completed\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *          \uc0\u8594  Rejected\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *          \uc0\u8594  Revise and Resubmit \u8594  Resubmitted \u8594  Submitted\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *          \uc0\u8594  Canceled (possible from any status)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Required Fields by Status:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * - Ordered: Link to PoP, Payment Date, Expected Landing Date\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * - Completed: Landed Date\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * - Rejected/R&R: Procurement Notes\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Change History:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * --------------\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * 2024-11-06: Initial implementation\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * 2024-11-19: Integrated authorization checks and additional validation methods\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Configuration Constants\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * ======================\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Defines valid status transitions and required fields for each status.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * These configurations govern the entire workflow behavior.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 STATUS_WORKFLOW\cf4 \strokec4  = \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cb1 \
\cb3   \cf7 \strokec7 // PR status transitions\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 PR_TRANSITIONS\cf4 \strokec4 : \{\cb1 \
\cb3     \cf8 \strokec8 'Submitted'\cf4 \strokec4 : [\cf8 \strokec8 'In Queue'\cf4 \strokec4 , \cf8 \strokec8 'Revise and Resubmit'\cf4 \strokec4 , \cf8 \strokec8 'Rejected'\cf4 \strokec4 , \cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'In Queue'\cf4 \strokec4 : [\cf8 \strokec8 'PR Ready'\cf4 \strokec4 , \cf8 \strokec8 'Revise and Resubmit'\cf4 \strokec4 , \cf8 \strokec8 'Rejected'\cf4 \strokec4 , \cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'Revise and Resubmit'\cf4 \strokec4 : [\cf8 \strokec8 'Resubmitted'\cf4 \strokec4 , \cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'Resubmitted'\cf4 \strokec4 : [\cf8 \strokec8 'Submitted'\cf4 \strokec4 , \cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'PR Ready'\cf4 \strokec4 : [\cf8 \strokec8 'PO Pending Approval'\cf4 \strokec4 , \cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'Rejected'\cf4 \strokec4 : [\cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'Canceled'\cf4 \strokec4 : []\cb1 \
\cb3   \},\cb1 \
\
\cb3   \cf7 \strokec7 // PO status transitions\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 PO_TRANSITIONS\cf4 \strokec4 : \{\cb1 \
\cb3     \cf8 \strokec8 'PO Pending Approval'\cf4 \strokec4 : [\cf8 \strokec8 'PO Approved'\cf4 \strokec4 , \cf8 \strokec8 'Rejected'\cf4 \strokec4 , \cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'PO Approved'\cf4 \strokec4 : [\cf8 \strokec8 'PO Ordered'\cf4 \strokec4 , \cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'PO Ordered'\cf4 \strokec4 : [\cf8 \strokec8 'Completed'\cf4 \strokec4 , \cf8 \strokec8 'In Queue'\cf4 \strokec4 , \cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'Completed'\cf4 \strokec4 : [\cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'Rejected'\cf4 \strokec4 : [\cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'Canceled'\cf4 \strokec4 : []\cb1 \
\cb3   \},\cb1 \
\
\cb3   \cf7 \strokec7 // Valid status transitions matrix\cf4 \cb1 \strokec4 \
\cb3   \cf7 \strokec7 // Key: current status, Value: array of allowed next statuses\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 VALID_TRANSITIONS\cf4 \strokec4 : \{\cb1 \
\cb3     \cf8 \strokec8 'Submitted'\cf4 \strokec4 : [\cf8 \strokec8 'In Queue'\cf4 \strokec4 , \cf8 \strokec8 'Rejected'\cf4 \strokec4 , \cf8 \strokec8 'Revise and Resubmit'\cf4 \strokec4 , \cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'In Queue'\cf4 \strokec4 : [\cf8 \strokec8 'Ordered'\cf4 \strokec4 , \cf8 \strokec8 'Revise and Resubmit'\cf4 \strokec4 , \cf8 \strokec8 'Rejected'\cf4 \strokec4 , \cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'Ordered'\cf4 \strokec4 : [\cf8 \strokec8 'Completed'\cf4 \strokec4 , \cf8 \strokec8 'In Queue'\cf4 \strokec4 , \cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'Revise and Resubmit'\cf4 \strokec4 : [\cf8 \strokec8 'Resubmitted'\cf4 \strokec4 , \cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'Resubmitted'\cf4 \strokec4 : [\cf8 \strokec8 'Submitted'\cf4 \strokec4 , \cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'Completed'\cf4 \strokec4 : [\cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'Rejected'\cf4 \strokec4 : [\cf8 \strokec8 'Canceled'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'Canceled'\cf4 \strokec4 : []\cb1 \
\cb3   \},\cb1 \
\
\cb3   \cf7 \strokec7 // Required fields for each status\cf4 \cb1 \strokec4 \
\cb3   \cf7 \strokec7 // Maps status to required field definitions\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 REQUIRED_FIELDS\cf4 \strokec4 : \{\cb1 \
\cb3     \cf8 \strokec8 'Ordered'\cf4 \strokec4 : \{\cb1 \
\cb3       \cf9 \strokec9 fields\cf4 \strokec4 : [\cf8 \strokec8 'Link to PoP'\cf4 \strokec4 , \cf8 \strokec8 'Payment Date'\cf4 \strokec4 , \cf8 \strokec8 'Expected Landing Date'\cf4 \strokec4 ],\cb1 \
\cb3       \cf9 \strokec9 columns\cf4 \strokec4 : [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 LINK_TO_POP\cf4 \strokec4 , \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PAYMENT_DATE\cf4 \strokec4 , \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 EXPECTED_LANDING_DATE\cf4 \strokec4 ]\cb1 \
\cb3     \},\cb1 \
\cb3     \cf8 \strokec8 'Completed'\cf4 \strokec4 : \{\cb1 \
\cb3       \cf9 \strokec9 fields\cf4 \strokec4 : [\cf8 \strokec8 'Landed Date'\cf4 \strokec4 ],\cb1 \
\cb3       \cf9 \strokec9 columns\cf4 \strokec4 : [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 LANDED_DATE\cf4 \strokec4 ]\cb1 \
\cb3     \},\cb1 \
\cb3     \cf8 \strokec8 'Rejected'\cf4 \strokec4 : \{\cb1 \
\cb3       \cf9 \strokec9 fields\cf4 \strokec4 : [\cf8 \strokec8 'Procurement Notes'\cf4 \strokec4 ],\cb1 \
\cb3       \cf9 \strokec9 columns\cf4 \strokec4 : [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PROCUREMENT_NOTES\cf4 \strokec4 ]\cb1 \
\cb3     \},\cb1 \
\cb3     \cf8 \strokec8 'Revise and Resubmit'\cf4 \strokec4 : \{\cb1 \
\cb3       \cf9 \strokec9 fields\cf4 \strokec4 : [\cf8 \strokec8 'Procurement Notes'\cf4 \strokec4 ],\cb1 \
\cb3       \cf9 \strokec9 columns\cf4 \strokec4 : [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PROCUREMENT_NOTES\cf4 \strokec4 ]\cb1 \
\cb3     \}\cb1 \
\cb3   \},\cb1 \
\
\cb3   \cf7 \strokec7 // Status-specific automated actions\cf4 \cb1 \strokec4 \
\cb3   \cf7 \strokec7 // Maps status to array of action handlers to execute\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 STATUS_ACTIONS\cf4 \strokec4 : \{\cb1 \
\cb3     \cf8 \strokec8 'Ordered'\cf4 \strokec4 : [\cf8 \strokec8 'resetAutoCancellation'\cf4 \strokec4 , \cf8 \strokec8 'startReminderSchedule'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'Completed'\cf4 \strokec4 : [\cf8 \strokec8 'clearReminders'\cf4 \strokec4 , \cf8 \strokec8 'sendCompletionNotification'\cf4 \strokec4 ],\cb1 \
\cb3     \cf8 \strokec8 'Canceled'\cf4 \strokec4 : [\cf8 \strokec8 'clearReminders'\cf4 \strokec4 , \cf8 \strokec8 'sendCancellationNotification'\cf4 \strokec4 ]\cb1 \
\cb3   \},\cb1 \
\
\cb3   \cf7 \strokec7 // Auto-cancellation configurations\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 AUTO_CANCEL_DAYS\cf4 \strokec4 : \cf10 \strokec10 30\cf4 \strokec4 , \cf7 \strokec7 // Days after which to auto-cancel\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 AUTO_CANCEL_WARNING_DAYS\cf4 \strokec4 : \cf10 \strokec10 25\cf4 \strokec4 , \cf7 \strokec7 // Days after which to send warning\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 SYSTEM_ADMIN_EMAIL\cf4 \strokec4 : \cf8 \strokec8 'admin@1pwr.com'\cf4 \strokec4 , \cf7 \strokec7 // System admin email\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 PROCUREMENT_EMAIL\cf4 \strokec4 : \cf8 \strokec8 'procurement@1pwr.com'\cf4 \strokec4 ,\cb1 \
\cb3   \cf6 \strokec6 FINANCE_EMAIL\cf4 \strokec4 : \cf8 \strokec8 'finance@1pwr.com'\cf4 \cb1 \strokec4 \
\cb3 \};\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Status Workflow Manager Class\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * ============================\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Core class for handling all status-related operations.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Provides methods for status updates, validation, authorization checks, and associated actions.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 class\cf4 \strokec4  \cf6 \strokec6 StatusWorkflowManager\cf4 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Initializes the workflow manager\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * Sets up sheet access and validates system configuration\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @throws \{Error\} If required sheets cannot be accessed\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 constructor\cf4 \strokec4 () \{\cb1 \
\cb3     \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 ss\cf4 \strokec4  = \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 openById\cf4 \strokec4 (\cf6 \strokec6 SPREADSHEET_ID\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 masterSheet\cf4 \strokec4  = \cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 MASTER_LOG_TAB\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 auditSheet\cf4 \strokec4  = \cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf8 \strokec8 'Audit Log'\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 prTrackerSheet\cf4 \strokec4  = \cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf8 \strokec8 'PR Number Tracker'\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 poTrackerSheet\cf4 \strokec4  = \cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf8 \strokec8 'PO Number Tracker'\cf4 \strokec4 );\cb1 \
\
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (!\cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 masterSheet\cf4 \strokec4  || !\cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 auditSheet\cf4 \strokec4  ||\cb1 \
\cb3           !\cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 prTrackerSheet\cf4 \strokec4  || !\cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 poTrackerSheet\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 'Required sheets not found'\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\
\cb3       \cf7 \strokec7 // Cache sheet headers for performance\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 headers\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf10 \strokec10 1\cf4 \strokec4 , \cf10 \strokec10 1\cf4 \strokec4 , \cf10 \strokec10 1\cf4 \strokec4 ,\cb1 \
\cb3         \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 getLastColumn\cf4 \strokec4 ()).\cf9 \strokec9 getValues\cf4 \strokec4 ()[\cf10 \strokec10 0\cf4 \strokec4 ];\cb1 \
\
\cb3       \cf7 \strokec7 // Initialize cache for queue positions\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 queueCache\cf4 \strokec4  = \cf6 \strokec6 CacheService\cf4 \strokec4 .\cf9 \strokec9 getScriptCache\cf4 \strokec4 ();\cb1 \
\
\cb3     \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 'StatusWorkflowManager initialization failed:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 `Failed to initialize StatusWorkflowManager: \cf4 \strokec4 $\{\cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Updates PR/PO status with full validation, authorization checks, and associated actions\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{string\} docNumber - PR/PO number to update\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{string\} newStatus - Desired new status\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{string\} notes - Status change notes\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{boolean\} skipValidation - Optional flag to skip validation\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @returns \{Object\} Update result\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 updateStatus\cf4 \strokec4 (\cf9 \strokec9 docNumber\cf4 \strokec4 , \cf9 \strokec9 newStatus\cf4 \strokec4 , \cf9 \strokec9 notes\cf4 \strokec4  = \cf8 \strokec8 ''\cf4 \strokec4 , \cf9 \strokec9 skipValidation\cf4 \strokec4  = \cf5 \strokec5 false\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf8 \strokec8 `Starting status update for \cf4 \strokec4 $\{\cf9 \strokec9 docNumber\cf4 \strokec4 \}\cf8 \strokec8  to \cf4 \strokec4 $\{\cf9 \strokec9 newStatus\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\
\cb3     \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf7 \strokec7 // Check authorization\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 user\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 getCurrentUser\cf4 \strokec4 ();\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 user\cf4 \strokec4  || !\cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 isAuthorized\cf4 \strokec4 (\cf8 \strokec8 'procurement'\cf4 \strokec4 )) \{\cb1 \
\cb3         \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 'Not authorized to update status'\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf8 \strokec8 `User authenticated: \cf4 \strokec4 $\{\cf9 \strokec9 user\cf4 \strokec4 .\cf9 \strokec9 email\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 lock\cf4 \strokec4  = \cf6 \strokec6 LockService\cf4 \strokec4 .\cf9 \strokec9 getScriptLock\cf4 \strokec4 ();\cb1 \
\cb3       \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3         \cf9 \strokec9 lock\cf4 \strokec4 .\cf9 \strokec9 waitLock\cf4 \strokec4 (\cf10 \strokec10 30000\cf4 \strokec4 );\cb1 \
\
\cb3         \cf7 \strokec7 // Find document data\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 docData\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 findDocument\cf4 \strokec4 (\cf9 \strokec9 docNumber\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 docData\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 `Document \cf4 \strokec4 $\{\cf9 \strokec9 docNumber\cf4 \strokec4 \}\cf8 \strokec8  not found in Master Log`\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf7 \strokec7 // Determine document type and status field\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 isPR\cf4 \strokec4  = \cf9 \strokec9 docNumber\cf4 \strokec4 .\cf9 \strokec9 startsWith\cf4 \strokec4 (\cf8 \strokec8 'PR-'\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 statusColumn\cf4 \strokec4  = \cf9 \strokec9 isPR\cf4 \strokec4  ? \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PR_STATUS\cf4 \strokec4  : \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PO_STATUS\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 currentStatus\cf4 \strokec4  = \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf9 \strokec9 statusColumn\cf4 \strokec4 ];\cb1 \
\
\cb3         \cf7 \strokec7 // Validate status change unless skipped\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 skipValidation\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 validateStatusTransition\cf4 \strokec4 (\cf9 \strokec9 currentStatus\cf4 \strokec4 , \cf9 \strokec9 newStatus\cf4 \strokec4 , \cf9 \strokec9 isPR\cf4 \strokec4 );\cb1 \
\cb3           \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 validateRequiredFields\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 , \cf9 \strokec9 newStatus\cf4 \strokec4 );\cb1 \
\cb3           \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 validateBusinessRules\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 , \cf9 \strokec9 newStatus\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf7 \strokec7 // Prepare status change data\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 statusChangeData\cf4 \strokec4  = \{\cb1 \
\cb3           \cf9 \strokec9 timestamp\cf4 \strokec4 : \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Date\cf4 \strokec4 (),\cb1 \
\cb3           \cf9 \strokec9 oldStatus\cf4 \strokec4 : \cf9 \strokec9 currentStatus\cf4 \strokec4 ,\cb1 \
\cb3           \cf9 \strokec9 newStatus\cf4 \strokec4 : \cf9 \strokec9 newStatus\cf4 \strokec4 ,\cb1 \
\cb3           \cf9 \strokec9 notes\cf4 \strokec4 : \cf9 \strokec9 notes\cf4 \strokec4 ,\cb1 \
\cb3           \cf9 \strokec9 user\cf4 \strokec4 : \cf9 \strokec9 user\cf4 \strokec4 .\cf9 \strokec9 username\cf4 \strokec4  || \cf9 \strokec9 user\cf4 \strokec4 .\cf9 \strokec9 email\cf4 \strokec4  \cf7 \strokec7 // Assuming user object has username or email\cf4 \cb1 \strokec4 \
\cb3         \};\cb1 \
\
\cb3         \cf7 \strokec7 // Perform status update\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 performStatusUpdate\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 , \cf9 \strokec9 statusChangeData\cf4 \strokec4 , \cf9 \strokec9 statusColumn\cf4 \strokec4 );\cb1 \
\
\cb3         \cf7 \strokec7 // Handle post-update actions\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 handlePostUpdateActions\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 , \cf9 \strokec9 newStatus\cf4 \strokec4 );\cb1 \
\
\cb3         \cf5 \strokec5 return\cf4 \strokec4  \{\cb1 \
\cb3           \cf9 \strokec9 success\cf4 \strokec4 : \cf5 \strokec5 true\cf4 \strokec4 ,\cb1 \
\cb3           \cf9 \strokec9 message\cf4 \strokec4 : \cf8 \strokec8 `Status updated to \cf4 \strokec4 $\{\cf9 \strokec9 newStatus\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 ,\cb1 \
\cb3           \cf9 \strokec9 docNumber\cf4 \strokec4 : \cf9 \strokec9 docNumber\cf4 \strokec4 ,\cb1 \
\cb3           \cf9 \strokec9 timestamp\cf4 \strokec4 : \cf9 \strokec9 statusChangeData\cf4 \strokec4 .\cf9 \strokec9 timestamp\cf4 \cb1 \strokec4 \
\cb3         \};\cb1 \
\
\cb3       \} \cf5 \strokec5 finally\cf4 \strokec4  \{\cb1 \
\cb3         \cf9 \strokec9 lock\cf4 \strokec4 .\cf9 \strokec9 releaseLock\cf4 \strokec4 ();\cb1 \
\cb3       \}\cb1 \
\
\cb3     \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 `Error updating status for \cf4 \strokec4 $\{\cf9 \strokec9 docNumber\cf4 \strokec4 \}\cf8 \strokec8 :`\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 return\cf4 \strokec4  \{\cb1 \
\cb3         \cf9 \strokec9 success\cf4 \strokec4 : \cf5 \strokec5 false\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 error\cf4 \strokec4 : \cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 toString\cf4 \strokec4 (),\cb1 \
\cb3         \cf9 \strokec9 docNumber\cf4 \strokec4 : \cf9 \strokec9 docNumber\cf4 \cb1 \strokec4 \
\cb3       \};\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Checks if the current user has a specific role.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{string\} role - The role to check (e.g., 'procurement', 'approver', 'finance').\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @returns \{boolean\} True if authorized, false otherwise.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 isAuthorized\cf4 \strokec4 (\cf9 \strokec9 role\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf7 \strokec7 // Implementation depends on your authorization mechanism\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 user\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 getCurrentUser\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 user\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4  \cf5 \strokec5 false\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf6 \strokec6 AuthService\cf4 \strokec4 .\cf9 \strokec9 hasRole\cf4 \strokec4 (\cf9 \strokec9 user\cf4 \strokec4 , \cf9 \strokec9 role\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Finds a document (PR/PO) in the Master Log by its number.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{string\} docNumber - The PR or PO number to find.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @returns \{Object|null\} Document data if found, otherwise null.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 findDocument\cf4 \strokec4 (\cf9 \strokec9 docNumber\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 data\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 getDataRange\cf4 \strokec4 ().\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 searchColumn\cf4 \strokec4  = \cf9 \strokec9 docNumber\cf4 \strokec4 .\cf9 \strokec9 startsWith\cf4 \strokec4 (\cf8 \strokec8 'PR-'\cf4 \strokec4 ) ? \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PR_NUMBER\cf4 \strokec4  : \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PO_NUMBER\cf4 \strokec4 ;\cb1 \
\
\cb3     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 i\cf4 \strokec4  = \cf10 \strokec10 1\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4  < \cf9 \strokec9 data\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4 ++) \{ \cf7 \strokec7 // Skip header row\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 data\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ][\cf9 \strokec9 searchColumn\cf4 \strokec4 ] === \cf9 \strokec9 docNumber\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 return\cf4 \strokec4  \{\cb1 \
\cb3           \cf9 \strokec9 rowIndex\cf4 \strokec4 : \cf9 \strokec9 i\cf4 \strokec4  + \cf10 \strokec10 1\cf4 \strokec4 , \cf7 \strokec7 // Sheet rows are 1-indexed\cf4 \cb1 \strokec4 \
\cb3           \cf9 \strokec9 rowData\cf4 \strokec4 : \cf9 \strokec9 data\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ],\cb1 \
\cb3           \cf9 \strokec9 docNumber\cf4 \strokec4 : \cf9 \strokec9 docNumber\cf4 \cb1 \strokec4 \
\cb3         \};\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf5 \strokec5 null\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Validates the status transition based on current and new status.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{string\} currentStatus - The current status of the document.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{string\} newStatus - The desired new status.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{boolean\} isPR - True if the document is a PR, false if PO.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @throws \{Error\} If the transition is invalid.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 validateStatusTransition\cf4 \strokec4 (\cf9 \strokec9 currentStatus\cf4 \strokec4 , \cf9 \strokec9 newStatus\cf4 \strokec4 , \cf9 \strokec9 isPR\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 transitions\cf4 \strokec4  = \cf9 \strokec9 isPR\cf4 \strokec4  ? \cb1 \
\cb3       \cf6 \strokec6 STATUS_WORKFLOW\cf4 \strokec4 .\cf6 \strokec6 PR_TRANSITIONS\cf4 \strokec4  : \cb1 \
\cb3       \cf6 \strokec6 STATUS_WORKFLOW\cf4 \strokec4 .\cf6 \strokec6 PO_TRANSITIONS\cf4 \strokec4 ;\cb1 \
\
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 transitions\cf4 \strokec4 .\cf9 \strokec9 hasOwnProperty\cf4 \strokec4 (\cf9 \strokec9 currentStatus\cf4 \strokec4 )) \{\cb1 \
\cb3       \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 `Invalid current status: \cf4 \strokec4 $\{\cf9 \strokec9 currentStatus\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 allowedTransitions\cf4 \strokec4  = \cf9 \strokec9 transitions\cf4 \strokec4 [\cf9 \strokec9 currentStatus\cf4 \strokec4 ];\cb1 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 allowedTransitions\cf4 \strokec4 ?.\cf9 \strokec9 includes\cf4 \strokec4 (\cf9 \strokec9 newStatus\cf4 \strokec4 )) \{\cb1 \
\cb3       \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cb1 \
\cb3         \cf8 \strokec8 `Invalid status transition from \cf4 \strokec4 $\{\cf9 \strokec9 currentStatus\cf4 \strokec4 \}\cf8 \strokec8  to \cf4 \strokec4 $\{\cf9 \strokec9 newStatus\cf4 \strokec4 \}\cf8 \strokec8 . `\cf4 \strokec4  +\cb1 \
\cb3         \cf8 \strokec8 `Allowed transitions: \cf4 \strokec4 $\{\cf9 \strokec9 allowedTransitions\cf4 \strokec4 ?.\cf9 \strokec9 join\cf4 \strokec4 (\cf8 \strokec8 ', '\cf4 \strokec4 )\}\cf8 \strokec8 `\cf4 \cb1 \strokec4 \
\cb3       );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Validates that all required fields for the new status are present.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{Object\} docData - The document data.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{string\} newStatus - The desired new status.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @throws \{Error\} If required fields are missing.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 validateRequiredFields\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 , \cf9 \strokec9 newStatus\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 requirements\cf4 \strokec4  = \cf6 \strokec6 STATUS_WORKFLOW\cf4 \strokec4 .\cf6 \strokec6 REQUIRED_FIELDS\cf4 \strokec4 [\cf9 \strokec9 newStatus\cf4 \strokec4 ];\cb1 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 requirements\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4 ;\cb1 \
\
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 missingFields\cf4 \strokec4  = [];\cb1 \
\cb3     \cf9 \strokec9 requirements\cf4 \strokec4 .\cf9 \strokec9 fields\cf4 \strokec4 .\cf9 \strokec9 forEach\cf4 \strokec4 (\cf9 \strokec9 field\cf4 \strokec4  => \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 value\cf4 \strokec4  = \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 [\cf9 \strokec9 field\cf4 \strokec4 .\cf9 \strokec9 toUpperCase\cf4 \strokec4 ()]];\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 value\cf4 \strokec4  || (\cf5 \strokec5 typeof\cf4 \strokec4  \cf9 \strokec9 value\cf4 \strokec4  === \cf8 \strokec8 'string'\cf4 \strokec4  && \cf9 \strokec9 value\cf4 \strokec4 .\cf9 \strokec9 trim\cf4 \strokec4 () === \cf8 \strokec8 ''\cf4 \strokec4 )) \{\cb1 \
\cb3         \cf9 \strokec9 missingFields\cf4 \strokec4 .\cf9 \strokec9 push\cf4 \strokec4 (\cf9 \strokec9 field\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3     \});\cb1 \
\
\cb3     \cf7 \strokec7 // Check conditional fields\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 requirements\cf4 \strokec4 .\cf9 \strokec9 conditionalFields\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 isQuotesRequired\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 ) && \cb1 \
\cb3           \cf9 \strokec9 requirements\cf4 \strokec4 .\cf9 \strokec9 conditionalFields\cf4 \strokec4 .\cf9 \strokec9 quotesRequired\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 requirements\cf4 \strokec4 .\cf9 \strokec9 conditionalFields\cf4 \strokec4 .\cf9 \strokec9 quotesRequired\cf4 \strokec4 .\cf9 \strokec9 forEach\cf4 \strokec4 (\cf9 \strokec9 field\cf4 \strokec4  => \{\cb1 \
\cb3           \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 value\cf4 \strokec4  = \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 [\cf9 \strokec9 field\cf4 \strokec4 .\cf9 \strokec9 toUpperCase\cf4 \strokec4 ()]];\cb1 \
\cb3           \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 value\cf4 \strokec4  || (\cf5 \strokec5 typeof\cf4 \strokec4  \cf9 \strokec9 value\cf4 \strokec4  === \cf8 \strokec8 'string'\cf4 \strokec4  && \cf9 \strokec9 value\cf4 \strokec4 .\cf9 \strokec9 trim\cf4 \strokec4 () === \cf8 \strokec8 ''\cf4 \strokec4 )) \{\cb1 \
\cb3             \cf9 \strokec9 missingFields\cf4 \strokec4 .\cf9 \strokec9 push\cf4 \strokec4 (\cf9 \strokec9 field\cf4 \strokec4 );\cb1 \
\cb3           \}\cb1 \
\cb3         \});\cb1 \
\cb3       \}\cb1 \
\
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 isAdjudicationRequired\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 ) && \cb1 \
\cb3           \cf9 \strokec9 requirements\cf4 \strokec4 .\cf9 \strokec9 conditionalFields\cf4 \strokec4 .\cf9 \strokec9 adjudicationRequired\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 requirements\cf4 \strokec4 .\cf9 \strokec9 conditionalFields\cf4 \strokec4 .\cf9 \strokec9 adjudicationRequired\cf4 \strokec4 .\cf9 \strokec9 forEach\cf4 \strokec4 (\cf9 \strokec9 field\cf4 \strokec4  => \{\cb1 \
\cb3           \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 value\cf4 \strokec4  = \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 [\cf9 \strokec9 field\cf4 \strokec4 .\cf9 \strokec9 toUpperCase\cf4 \strokec4 ()]];\cb1 \
\cb3           \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 value\cf4 \strokec4  || (\cf5 \strokec5 typeof\cf4 \strokec4  \cf9 \strokec9 value\cf4 \strokec4  === \cf8 \strokec8 'string'\cf4 \strokec4  && \cf9 \strokec9 value\cf4 \strokec4 .\cf9 \strokec9 trim\cf4 \strokec4 () === \cf8 \strokec8 ''\cf4 \strokec4 )) \{\cb1 \
\cb3             \cf9 \strokec9 missingFields\cf4 \strokec4 .\cf9 \strokec9 push\cf4 \strokec4 (\cf9 \strokec9 field\cf4 \strokec4 );\cb1 \
\cb3           \}\cb1 \
\cb3         \});\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 missingFields\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4  > \cf10 \strokec10 0\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cb1 \
\cb3         \cf8 \strokec8 `Missing required fields for \cf4 \strokec4 $\{\cf9 \strokec9 newStatus\cf4 \strokec4 \}\cf8 \strokec8  status: \cf4 \strokec4 $\{\cf9 \strokec9 missingFields\cf4 \strokec4 .\cf9 \strokec9 join\cf4 \strokec4 (\cf8 \strokec8 ', '\cf4 \strokec4 )\}\cf8 \strokec8 `\cf4 \cb1 \strokec4 \
\cb3       );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Validates additional business rules for the status transition.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{Object\} docData - The document data.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{string\} newStatus - The desired new status.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @throws \{Error\} If business rules are violated.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 validateBusinessRules\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 , \cf9 \strokec9 newStatus\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 amount\cf4 \strokec4  = \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PR_AMOUNT\cf4 \strokec4 ];\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 isApprovedVendor\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 checkApprovedVendor\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 VENDOR\cf4 \strokec4 ]);\cb1 \
\
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 newStatus\cf4 \strokec4  === \cf8 \strokec8 'PR Ready'\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf7 \strokec7 // Quotes validation\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 amount\cf4 \strokec4  > \cf10 \strokec10 5000\cf4 \strokec4  && !\cf9 \strokec9 isApprovedVendor\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 QUOTES_LINK\cf4 \strokec4 ]) \{\cb1 \
\cb3           \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 'Three quotes are required for amounts over 5,000 LSL with non-approved vendor'\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 amount\cf4 \strokec4  > \cf10 \strokec10 50000\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 QUOTES_LINK\cf4 \strokec4 ]) \{\cb1 \
\cb3           \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 'Three quotes are required for amounts over 50,000 LSL'\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 ADJ_NOTES\cf4 \strokec4 ]) \{\cb1 \
\cb3           \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 'Adjudication is required for amounts over 50,000 LSL'\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 newStatus\cf4 \strokec4  === \cf8 \strokec8 'PO Ordered'\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 expectedDate\cf4 \strokec4  = \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 EXPECTED_LANDING_DATE\cf4 \strokec4 ];\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 expectedDate\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 maxDate\cf4 \strokec4  = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Date\cf4 \strokec4 ();\cb1 \
\cb3         \cf9 \strokec9 maxDate\cf4 \strokec4 .\cf9 \strokec9 setMonth\cf4 \strokec4 (\cf9 \strokec9 maxDate\cf4 \strokec4 .\cf9 \strokec9 getMonth\cf4 \strokec4 () + \cf10 \strokec10 6\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (\cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Date\cf4 \strokec4 (\cf9 \strokec9 expectedDate\cf4 \strokec4 ) > \cf9 \strokec9 maxDate\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 'Expected Landing Date cannot be more than 6 months in the future'\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3       \} \cf5 \strokec5 else\cf4 \strokec4  \{\cb1 \
\cb3         \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 'Expected Landing Date is required for PO Ordered status'\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3     \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Performs the actual status update in the Master Log.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{Object\} docData - The document data.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{Object\} statusChangeData - The status change details.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{number\} statusColumn - The column index for status.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 performStatusUpdate\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 , \cf9 \strokec9 statusChangeData\cf4 \strokec4 , \cf9 \strokec9 statusColumn\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 rowRange\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowIndex\cf4 \strokec4 , \cf10 \strokec10 1\cf4 \strokec4 , \cf10 \strokec10 1\cf4 \strokec4 ,\cb1 \
\cb3         \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 getLastColumn\cf4 \strokec4 ());\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 rowValues\cf4 \strokec4  = \cf9 \strokec9 rowRange\cf4 \strokec4 .\cf9 \strokec9 getValues\cf4 \strokec4 ()[\cf10 \strokec10 0\cf4 \strokec4 ];\cb1 \
\
\cb3       \cf7 \strokec7 // Update status\cf4 \cb1 \strokec4 \
\cb3       \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf9 \strokec9 statusColumn\cf4 \strokec4 ] = \cf9 \strokec9 statusChangeData\cf4 \strokec4 .\cf9 \strokec9 newStatus\cf4 \strokec4 ;\cb1 \
\
\cb3       \cf7 \strokec7 // Update notes if provided\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 statusChangeData\cf4 \strokec4 .\cf9 \strokec9 notes\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 currentNotes\cf4 \strokec4  = \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PROCUREMENT_NOTES\cf4 \strokec4 ] || \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 updatedNotes\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 addTimestampToNote\cf4 \strokec4 (\cf9 \strokec9 statusChangeData\cf4 \strokec4 .\cf9 \strokec9 notes\cf4 \strokec4 , \cf9 \strokec9 currentNotes\cf4 \strokec4 );\cb1 \
\cb3         \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PROCUREMENT_NOTES\cf4 \strokec4 ] = \cf9 \strokec9 updatedNotes\cf4 \strokec4 ;\cb1 \
\cb3       \}\cb1 \
\
\cb3       \cf7 \strokec7 // Update modification tracking\cf4 \cb1 \strokec4 \
\cb3       \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 LAST_MODIFIED\cf4 \strokec4 ] = \cf9 \strokec9 statusChangeData\cf4 \strokec4 .\cf9 \strokec9 timestamp\cf4 \strokec4 ;\cb1 \
\cb3       \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 LAST_MODIFIED_BY\cf4 \strokec4 ] = \cf9 \strokec9 statusChangeData\cf4 \strokec4 .\cf9 \strokec9 user\cf4 \strokec4 ;\cb1 \
\
\cb3       \cf7 \strokec7 // Write all updates in single operation\cf4 \cb1 \strokec4 \
\cb3       \cf9 \strokec9 rowRange\cf4 \strokec4 .\cf9 \strokec9 setValues\cf4 \strokec4 ([\cf9 \strokec9 rowValues\cf4 \strokec4 ]);\cb1 \
\
\cb3       \cf7 \strokec7 // Log in audit trail\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 logStatusChange\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 , \cf9 \strokec9 statusChangeData\cf4 \strokec4 );\cb1 \
\
\cb3     \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 'Error performing status update:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 `Failed to update status in sheet: \cf4 \strokec4 $\{\cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Handles post-update actions based on the new status.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{Object\} docData - The document data.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{string\} newStatus - The new status after update.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 handlePostUpdateActions\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 , \cf9 \strokec9 newStatus\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf7 \strokec7 // Update queue positions if needed\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PR_STATUS\cf4 \strokec4 ] === \cf8 \strokec8 'In Queue'\cf4 \strokec4  || \cb1 \
\cb3           \cf9 \strokec9 newStatus\cf4 \strokec4  === \cf8 \strokec8 'In Queue'\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 updateQueuePositions\cf4 \strokec4 ();\cb1 \
\cb3       \}\cb1 \
\
\cb3       \cf7 \strokec7 // Handle PR to PO conversion\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 docNumber\cf4 \strokec4 .\cf9 \strokec9 startsWith\cf4 \strokec4 (\cf8 \strokec8 'PR-'\cf4 \strokec4 ) && \cf9 \strokec9 newStatus\cf4 \strokec4  === \cf8 \strokec8 'PR Ready'\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 initiatePOCreation\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\
\cb3       \cf7 \strokec7 // Initialize delivery tracking for ordered items\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 newStatus\cf4 \strokec4  === \cf8 \strokec8 'PO Ordered'\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 initializeDeliveryTracking\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\
\cb3       \cf7 \strokec7 // Clear reminders for completed/canceled items\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  ([\cf8 \strokec8 'Completed'\cf4 \strokec4 , \cf8 \strokec8 'Canceled'\cf4 \strokec4 ].\cf9 \strokec9 includes\cf4 \strokec4 (\cf9 \strokec9 newStatus\cf4 \strokec4 )) \{\cb1 \
\cb3         \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 clearAllReminders\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 docNumber\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\
\cb3       \cf7 \strokec7 // Send notifications\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 sendStatusNotification\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 , \cf9 \strokec9 newStatus\cf4 \strokec4 );\cb1 \
\
\cb3       \cf7 \strokec7 // Update completion percentage\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 updateCompletionPercentage\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowIndex\cf4 \strokec4 );\cb1 \
\
\cb3     \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 'Error in post-update actions:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 `Failed to complete post-update actions: \cf4 \strokec4 $\{\cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Logs the status change to the Audit Log.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{Object\} docData - The document data.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{Object\} statusChangeData - The status change details.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 logStatusChange\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 , \cf9 \strokec9 statusChangeData\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 auditSheet\cf4 \strokec4 .\cf9 \strokec9 appendRow\cf4 \strokec4 ([\cb1 \
\cb3         \cf9 \strokec9 statusChangeData\cf4 \strokec4 .\cf9 \strokec9 timestamp\cf4 \strokec4 .\cf9 \strokec9 toISOString\cf4 \strokec4 (),\cb1 \
\cb3         \cf9 \strokec9 statusChangeData\cf4 \strokec4 .\cf9 \strokec9 user\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 'Status Change'\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 docNumber\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 `Status changed from \cf4 \strokec4 $\{\cf9 \strokec9 statusChangeData\cf4 \strokec4 .\cf9 \strokec9 oldStatus\cf4 \strokec4 \}\cf8 \strokec8  to \cf4 \strokec4 $\{\cf9 \strokec9 statusChangeData\cf4 \strokec4 .\cf9 \strokec9 newStatus\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 statusChangeData\cf4 \strokec4 .\cf9 \strokec9 oldStatus\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 statusChangeData\cf4 \strokec4 .\cf9 \strokec9 newStatus\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 statusChangeData\cf4 \strokec4 .\cf9 \strokec9 notes\cf4 \strokec4  || \cf8 \strokec8 ''\cf4 \cb1 \strokec4 \
\cb3       ]);\cb1 \
\cb3     \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 'Error logging status change:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3       \cf7 \strokec7 // Non-critical error, continue execution\cf4 \cb1 \strokec4 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Adds timestamp to note\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{string\} newNote - New note content\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{string\} existingNotes - Existing notes\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @returns \{string\} Combined notes with timestamp\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 addTimestampToNote\cf4 \strokec4 (\cf9 \strokec9 newNote\cf4 \strokec4 , \cf9 \strokec9 existingNotes\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 timestamp\cf4 \strokec4  = \cf6 \strokec6 Utilities\cf4 \strokec4 .\cf9 \strokec9 formatDate\cf4 \strokec4 (\cb1 \
\cb3       \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Date\cf4 \strokec4 (),\cb1 \
\cb3       \cf6 \strokec6 Session\cf4 \strokec4 .\cf9 \strokec9 getScriptTimeZone\cf4 \strokec4 (),\cb1 \
\cb3       \cf8 \strokec8 'yyyy-MM-dd HH:mm'\cf4 \cb1 \strokec4 \
\cb3     );\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 formattedNote\cf4 \strokec4  = \cf8 \strokec8 `[\cf4 \strokec4 $\{\cf9 \strokec9 timestamp\cf4 \strokec4 \}\cf8 \strokec8 ] \cf4 \strokec4 $\{\cf9 \strokec9 newNote\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 existingNotes\cf4 \strokec4  ? \cf8 \strokec8 `\cf4 \strokec4 $\{\cf9 \strokec9 existingNotes\cf4 \strokec4 \}\cf8 \strokec8 \\n\cf4 \strokec4 $\{\cf9 \strokec9 formattedNote\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4  : \cf9 \strokec9 formattedNote\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Checks if quotes are required\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{Object\} docData - Document data\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @returns \{boolean\} Whether quotes are required\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 isQuotesRequired\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 amount\cf4 \strokec4  = \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PR_AMOUNT\cf4 \strokec4 ];\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 isApprovedVendor\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 checkApprovedVendor\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 VENDOR\cf4 \strokec4 ]);\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  (\cf9 \strokec9 amount\cf4 \strokec4  > \cf10 \strokec10 5000\cf4 \strokec4  && !\cf9 \strokec9 isApprovedVendor\cf4 \strokec4 ) || \cf9 \strokec9 amount\cf4 \strokec4  > \cf10 \strokec10 50000\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Checks if adjudication is required\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{Object\} docData - Document data\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @returns \{boolean\} Whether adjudication is required\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 isAdjudicationRequired\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PR_AMOUNT\cf4 \strokec4 ] > \cf10 \strokec10 50000\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Checks if vendor is approved\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{string\} vendor - Vendor name\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @returns \{boolean\} Whether vendor is approved\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 checkApprovedVendor\cf4 \strokec4 (\cf9 \strokec9 vendor\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 ss\cf4 \strokec4  = \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 openById\cf4 \strokec4 (\cf6 \strokec6 SPREADSHEET_ID\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 vendorSheet\cf4 \strokec4  = \cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf8 \strokec8 'Vendor List'\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 vendorSheet\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4  \cf5 \strokec5 false\cf4 \strokec4 ;\cb1 \
\
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 vendorData\cf4 \strokec4  = \cf9 \strokec9 vendorSheet\cf4 \strokec4 .\cf9 \strokec9 getDataRange\cf4 \strokec4 ().\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 headers\cf4 \strokec4  = \cf9 \strokec9 vendorData\cf4 \strokec4 [\cf10 \strokec10 0\cf4 \strokec4 ].\cf9 \strokec9 map\cf4 \strokec4 (\cf9 \strokec9 header\cf4 \strokec4  => \cf9 \strokec9 header\cf4 \strokec4 .\cf9 \strokec9 toString\cf4 \strokec4 ().\cf9 \strokec9 toLowerCase\cf4 \strokec4 ());\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 nameCol\cf4 \strokec4  = \cf9 \strokec9 headers\cf4 \strokec4 .\cf9 \strokec9 indexOf\cf4 \strokec4 (\cf8 \strokec8 'vendor name'\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 statusCol\cf4 \strokec4  = \cf9 \strokec9 headers\cf4 \strokec4 .\cf9 \strokec9 indexOf\cf4 \strokec4 (\cf8 \strokec8 'approved status (y/n)'\cf4 \strokec4 );\cb1 \
\
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 nameCol\cf4 \strokec4  === -\cf10 \strokec10 1\cf4 \strokec4  || \cf9 \strokec9 statusCol\cf4 \strokec4  === -\cf10 \strokec10 1\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4  \cf5 \strokec5 false\cf4 \strokec4 ;\cb1 \
\
\cb3       \cf7 \strokec7 // Search for vendor\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 i\cf4 \strokec4  = \cf10 \strokec10 1\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4  < \cf9 \strokec9 vendorData\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4 ++) \{\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 vendorData\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ][\cf9 \strokec9 nameCol\cf4 \strokec4 ] === \cf9 \strokec9 vendor\cf4 \strokec4  &&\cb1 \
\cb3             \cf9 \strokec9 vendorData\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ][\cf9 \strokec9 statusCol\cf4 \strokec4 ].\cf9 \strokec9 toString\cf4 \strokec4 ().\cf9 \strokec9 toUpperCase\cf4 \strokec4 () === \cf8 \strokec8 'Y'\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf5 \strokec5 return\cf4 \strokec4  \cf5 \strokec5 true\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3       \cf5 \strokec5 return\cf4 \strokec4  \cf5 \strokec5 false\cf4 \strokec4 ;\cb1 \
\cb3     \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 'Error checking vendor status:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 return\cf4 \strokec4  \cf5 \strokec5 false\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Initializes delivery tracking for ordered items\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{Object\} docData - Document data\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @private\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 initializeDeliveryTracking\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 rowRange\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowIndex\cf4 \strokec4 , \cf10 \strokec10 1\cf4 \strokec4 , \cf10 \strokec10 1\cf4 \strokec4 ,\cb1 \
\cb3         \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 getLastColumn\cf4 \strokec4 ());\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 rowValues\cf4 \strokec4  = \cf9 \strokec9 rowRange\cf4 \strokec4 .\cf9 \strokec9 getValues\cf4 \strokec4 ()[\cf10 \strokec10 0\cf4 \strokec4 ];\cb1 \
\
\cb3       \cf7 \strokec7 // Initialize tracking fields\cf4 \cb1 \strokec4 \
\cb3       \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 DAYS_OPEN\cf4 \strokec4 ] = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 calculateDaysOpen\cf4 \strokec4 (\cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 TIMESTAMP\cf4 \strokec4 ]);\cb1 \
\cb3       \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 COMPLETION\cf4 \strokec4 ] = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 calculateCompletion\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf7 \strokec7 // Set up shipping tracking if needed\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 EXPECTED_SHIPPING_DATE\cf4 \strokec4 ]) \{\cb1 \
\cb3         \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 TIME_TO_SHIP\cf4 \strokec4 ] = \cf10 \strokec10 0\cf4 \strokec4 ;\cb1 \
\cb3         \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 SHIPPED\cf4 \strokec4 ] = \cf8 \strokec8 'N'\cf4 \strokec4 ;\cb1 \
\cb3       \}\cb1 \
\
\cb3       \cf7 \strokec7 // Set up customs tracking if needed\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 CUSTOMS_REQUIRED\cf4 \strokec4 ] === \cf8 \strokec8 'Y'\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 CUSTOMS_CLEARED\cf4 \strokec4 ] = \cf8 \strokec8 'N'\cf4 \strokec4 ;\cb1 \
\cb3         \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 TIME_IN_CUSTOMS\cf4 \strokec4 ] = \cf10 \strokec10 0\cf4 \strokec4 ;\cb1 \
\cb3       \}\cb1 \
\
\cb3       \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 GOODS_LANDED\cf4 \strokec4 ] = \cf8 \strokec8 'N'\cf4 \strokec4 ;\cb1 \
\cb3       \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 TIME_TO_LAND\cf4 \strokec4 ] = \cf10 \strokec10 0\cf4 \strokec4 ;\cb1 \
\
\cb3       \cf9 \strokec9 rowRange\cf4 \strokec4 .\cf9 \strokec9 setValues\cf4 \strokec4 ([\cf9 \strokec9 rowValues\cf4 \strokec4 ]);\cb1 \
\cb3     \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 'Error initializing delivery tracking:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 `Failed to initialize delivery tracking: \cf4 \strokec4 $\{\cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Calculates completion percentage\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{Object\} docData - Document data\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @returns \{number\} Completion percentage\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @private\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 calculateCompletion\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 row\cf4 \strokec4  = \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 ;\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 isPR\cf4 \strokec4  = \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 docNumber\cf4 \strokec4 .\cf9 \strokec9 startsWith\cf4 \strokec4 (\cf8 \strokec8 'PR-'\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 requiredFields\cf4 \strokec4  = [];\cb1 \
\
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 isPR\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 requiredFields\cf4 \strokec4  = [\cb1 \
\cb3           \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PR_NUMBER\cf4 \strokec4 ,\cb1 \
\cb3           \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 REQUESTOR_NAME\cf4 \strokec4 ,\cb1 \
\cb3           \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 DEPARTMENT\cf4 \strokec4 ,\cb1 \
\cb3           \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 DESCRIPTION\cf4 \strokec4 ,\cb1 \
\cb3           \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PR_AMOUNT\cf4 \cb1 \strokec4 \
\cb3         ];\cb1 \
\
\cb3         \cf7 \strokec7 // Add conditional requirements\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (\cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 isQuotesRequired\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 )) \{\cb1 \
\cb3           \cf9 \strokec9 requiredFields\cf4 \strokec4 .\cf9 \strokec9 push\cf4 \strokec4 (\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 QUOTES_LINK\cf4 \strokec4 , \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 QUOTES_DATE\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (\cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 isAdjudicationRequired\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 )) \{\cb1 \
\cb3           \cf9 \strokec9 requiredFields\cf4 \strokec4 .\cf9 \strokec9 push\cf4 \strokec4 (\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 ADJ_NOTES\cf4 \strokec4 , \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 ADJ_DATE\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3       \} \cf5 \strokec5 else\cf4 \strokec4  \{\cb1 \
\cb3         \cf9 \strokec9 requiredFields\cf4 \strokec4  = [\cb1 \
\cb3           \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PO_NUMBER\cf4 \strokec4 ,\cb1 \
\cb3           \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 LINK_TO_POP\cf4 \strokec4 ,\cb1 \
\cb3           \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PAYMENT_DATE\cf4 \strokec4 ,\cb1 \
\cb3           \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 EXPECTED_LANDING_DATE\cf4 \cb1 \strokec4 \
\cb3         ];\cb1 \
\
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 CUSTOMS_REQUIRED\cf4 \strokec4 ] === \cf8 \strokec8 'Y'\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf9 \strokec9 requiredFields\cf4 \strokec4 .\cf9 \strokec9 push\cf4 \strokec4 (\cb1 \
\cb3             \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 CUSTOMS_DOCS\cf4 \strokec4 ,\cb1 \
\cb3             \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 CUSTOMS_SUBMISSION_DATE\cf4 \cb1 \strokec4 \
\cb3           );\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\
\cb3       \cf7 \strokec7 // Count populated required fields\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 filledCount\cf4 \strokec4  = \cf9 \strokec9 requiredFields\cf4 \strokec4 .\cf9 \strokec9 filter\cf4 \strokec4 (\cf9 \strokec9 col\cf4 \strokec4  => \{\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 value\cf4 \strokec4  = \cf9 \strokec9 row\cf4 \strokec4 [\cf9 \strokec9 col\cf4 \strokec4 ];\cb1 \
\cb3         \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 value\cf4 \strokec4  !== \cf5 \strokec5 null\cf4 \strokec4  && \cf9 \strokec9 value\cf4 \strokec4  !== \cf5 \strokec5 undefined\cf4 \strokec4  && \cf9 \strokec9 value\cf4 \strokec4 .\cf9 \strokec9 toString\cf4 \strokec4 ().\cf9 \strokec9 trim\cf4 \strokec4 () !== \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3       \}).\cf9 \strokec9 length\cf4 \strokec4 ;\cb1 \
\
\cb3       \cf5 \strokec5 return\cf4 \strokec4  \cf6 \strokec6 Math\cf4 \strokec4 .\cf9 \strokec9 round\cf4 \strokec4 ((\cf9 \strokec9 filledCount\cf4 \strokec4  / \cf9 \strokec9 requiredFields\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 ) * \cf10 \strokec10 100\cf4 \strokec4 );\cb1 \
\cb3     \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 'Error calculating completion:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 return\cf4 \strokec4  \cf10 \strokec10 0\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Calculates days open\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{Date\} timestamp - Creation timestamp\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @returns \{number\} Number of business days open\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @private\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 calculateDaysOpen\cf4 \strokec4 (\cf9 \strokec9 timestamp\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 timestamp\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4  \cf10 \strokec10 0\cf4 \strokec4 ;\cb1 \
\
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 today\cf4 \strokec4  = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Date\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 count\cf4 \strokec4  = \cf10 \strokec10 0\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 current\cf4 \strokec4  = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Date\cf4 \strokec4 (\cf9 \strokec9 timestamp\cf4 \strokec4 );\cb1 \
\
\cb3     \cf5 \strokec5 while\cf4 \strokec4  (\cf9 \strokec9 current\cf4 \strokec4  <= \cf9 \strokec9 today\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf7 \strokec7 // Skip weekends (0 = Sunday, 6 = Saturday)\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 current\cf4 \strokec4 .\cf9 \strokec9 getDay\cf4 \strokec4 () !== \cf10 \strokec10 0\cf4 \strokec4  && \cf9 \strokec9 current\cf4 \strokec4 .\cf9 \strokec9 getDay\cf4 \strokec4 () !== \cf10 \strokec10 6\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 count\cf4 \strokec4 ++;\cb1 \
\cb3       \}\cb1 \
\cb3       \cf9 \strokec9 current\cf4 \strokec4 .\cf9 \strokec9 setDate\cf4 \strokec4 (\cf9 \strokec9 current\cf4 \strokec4 .\cf9 \strokec9 getDate\cf4 \strokec4 () + \cf10 \strokec10 1\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 count\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Clears all reminders for a document\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{string\} docNumber - Document number\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @private\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 clearAllReminders\cf4 \strokec4 (\cf9 \strokec9 docNumber\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf7 \strokec7 // Clear reminder cache\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 queueCache\cf4 \strokec4 .\cf9 \strokec9 remove\cf4 \strokec4 (\cf8 \strokec8 `reminders_\cf4 \strokec4 $\{\cf9 \strokec9 docNumber\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\
\cb3       \cf7 \strokec7 // Clear from reminder log if exists\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 ss\cf4 \strokec4  = \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 openById\cf4 \strokec4 (\cf6 \strokec6 SPREADSHEET_ID\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 reminderSheet\cf4 \strokec4  = \cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf8 \strokec8 'Reminders Log'\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 reminderSheet\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4 ;\cb1 \
\
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 data\cf4 \strokec4  = \cf9 \strokec9 reminderSheet\cf4 \strokec4 .\cf9 \strokec9 getDataRange\cf4 \strokec4 ().\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 docCol\cf4 \strokec4  = \cf10 \strokec10 0\cf4 \strokec4 ; \cf7 \strokec7 // Assuming document number is in first column\cf4 \cb1 \strokec4 \
\
\cb3       \cf7 \strokec7 // Find and delete all reminder rows for this document\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 i\cf4 \strokec4  = \cf9 \strokec9 data\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4  - \cf10 \strokec10 1\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4  >= \cf10 \strokec10 1\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4 --) \{\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 data\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ][\cf9 \strokec9 docCol\cf4 \strokec4 ] === \cf9 \strokec9 docNumber\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf9 \strokec9 reminderSheet\cf4 \strokec4 .\cf9 \strokec9 deleteRow\cf4 \strokec4 (\cf9 \strokec9 i\cf4 \strokec4  + \cf10 \strokec10 1\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3     \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 'Error clearing reminders:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3       \cf7 \strokec7 // Non-critical error, continue execution\cf4 \cb1 \strokec4 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Sends status change notification\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{Object\} docData - Document data\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{string\} newStatus - New status\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @private\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 sendStatusNotification\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 , \cf9 \strokec9 newStatus\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 notificationData\cf4 \strokec4  = \{\cb1 \
\cb3         \cf9 \strokec9 docNumber\cf4 \strokec4 : \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 docNumber\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 description\cf4 \strokec4 : \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 DESCRIPTION\cf4 \strokec4 ],\cb1 \
\cb3         \cf9 \strokec9 requestor\cf4 \strokec4 : \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 REQUESTOR_NAME\cf4 \strokec4 ],\cb1 \
\cb3         \cf9 \strokec9 department\cf4 \strokec4 : \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 DEPARTMENT\cf4 \strokec4 ],\cb1 \
\cb3         \cf9 \strokec9 status\cf4 \strokec4 : \cf9 \strokec9 newStatus\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 previousStatus\cf4 \strokec4 : \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 docNumber\cf4 \strokec4 .\cf9 \strokec9 startsWith\cf4 \strokec4 (\cf8 \strokec8 'PR-'\cf4 \strokec4 ) ? \cb1 \
\cb3           \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PR_STATUS\cf4 \strokec4  : \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PO_STATUS\cf4 \strokec4 ],\cb1 \
\cb3         \cf9 \strokec9 link\cf4 \strokec4 : \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 generateDocumentLink\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 docNumber\cf4 \strokec4 )\cb1 \
\cb3       \};\cb1 \
\
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 recipients\cf4 \strokec4  = [\cb1 \
\cb3         \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 PROCUREMENT_EMAIL\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 EMAIL\cf4 \strokec4 ],\cb1 \
\cb3         \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 APPROVER\cf4 \strokec4 ]\cb1 \
\cb3       ].\cf9 \strokec9 filter\cf4 \strokec4 (\cf9 \strokec9 email\cf4 \strokec4  => \cf9 \strokec9 email\cf4 \strokec4 );\cb1 \
\
\cb3       \cf6 \strokec6 NotificationSystem\cf4 \strokec4 .\cf9 \strokec9 sendNotification\cf4 \strokec4 (\cb1 \
\cb3         \cf8 \strokec8 'STATUS_CHANGE'\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 notificationData\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 recipients\cf4 \cb1 \strokec4 \
\cb3       );\cb1 \
\cb3     \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 'Error sending notification:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3       \cf7 \strokec7 // Non-critical error, continue execution\cf4 \cb1 \strokec4 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Generates document link\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{string\} docNumber - Document number\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @returns \{string\} Document view URL\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @private\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 generateDocumentLink\cf4 \strokec4 (\cf9 \strokec9 docNumber\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 baseUrl\cf4 \strokec4  = \cf6 \strokec6 ScriptApp\cf4 \strokec4 .\cf9 \strokec9 getService\cf4 \strokec4 ().\cf9 \strokec9 getUrl\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf8 \strokec8 `\cf4 \strokec4 $\{\cf9 \strokec9 baseUrl\cf4 \strokec4 \}\cf8 \strokec8 ?doc=\cf4 \strokec4 $\{\cf9 \strokec9 encodeURIComponent\cf4 \strokec4 (\cf9 \strokec9 docNumber\cf4 \strokec4 )\}\cf8 \strokec8 `\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Updates completion percentage for a specific row\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{number\} rowIndex - Row index in the sheet\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @private\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 updateCompletionPercentage\cf4 \strokec4 (\cf9 \strokec9 rowIndex\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 sheet\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 masterSheet\cf4 \strokec4 ;\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 row\cf4 \strokec4  = \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 rowIndex\cf4 \strokec4 , \cf10 \strokec10 1\cf4 \strokec4 , \cf10 \strokec10 1\cf4 \strokec4 , \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getLastColumn\cf4 \strokec4 ()).\cf9 \strokec9 getValues\cf4 \strokec4 ()[\cf10 \strokec10 0\cf4 \strokec4 ];\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 docNumber\cf4 \strokec4  = \cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PR_NUMBER\cf4 \strokec4 ] || \cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PO_NUMBER\cf4 \strokec4 ];\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 docData\cf4 \strokec4  = \{\cb1 \
\cb3         \cf9 \strokec9 rowIndex\cf4 \strokec4 : \cf9 \strokec9 rowIndex\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 rowData\cf4 \strokec4 : \cf9 \strokec9 row\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 docNumber\cf4 \strokec4 : \cf9 \strokec9 docNumber\cf4 \cb1 \strokec4 \
\cb3       \};\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 completion\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 calculateCompletion\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 );\cb1 \
\cb3       \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 rowIndex\cf4 \strokec4 , \cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 COMPLETION\cf4 \strokec4  + \cf10 \strokec10 1\cf4 \strokec4 ).\cf9 \strokec9 setValue\cf4 \strokec4 (\cf9 \strokec9 completion\cf4 \strokec4 );\cb1 \
\cb3     \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 `Error updating completion percentage for row \cf4 \strokec4 $\{\cf9 \strokec9 rowIndex\cf4 \strokec4 \}\cf8 \strokec8 :`\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 `Failed to update completion percentage: \cf4 \strokec4 $\{\cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Initiates PO creation from a PR\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{Object\} docData - Document data\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @private\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 initiatePOCreation\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf7 \strokec7 // Implement PO creation logic here\cf4 \cb1 \strokec4 \
\cb3       \cf7 \strokec7 // Example: Generate PO number, create new PO entry, link to PR\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 newPONumber\cf4 \strokec4  = \cf8 \strokec8 `PO-\cf4 \strokec4 $\{\cf6 \strokec6 Date\cf4 \strokec4 .\cf9 \strokec9 now\cf4 \strokec4 ()\}\cf8 \strokec8 `\cf4 \strokec4 ;\cb1 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 poTrackerSheet\cf4 \strokec4 .\cf9 \strokec9 appendRow\cf4 \strokec4 ([\cf9 \strokec9 newPONumber\cf4 \strokec4 , \cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 docNumber\cf4 \strokec4 , \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Date\cf4 \strokec4 ().\cf9 \strokec9 toISOString\cf4 \strokec4 ()]);\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf8 \strokec8 `Created new PO \cf4 \strokec4 $\{\cf9 \strokec9 newPONumber\cf4 \strokec4 \}\cf8 \strokec8  from PR \cf4 \strokec4 $\{\cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 docNumber\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3     \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 'Error initiating PO creation:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 `Failed to initiate PO creation: \cf4 \strokec4 $\{\cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    * Initializes delivery tracking for a PO\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param \{Object\} docData - Document data\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @private\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 initializeDeliveryTracking\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 rowRange\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 .\cf9 \strokec9 rowIndex\cf4 \strokec4 , \cf10 \strokec10 1\cf4 \strokec4 , \cf10 \strokec10 1\cf4 \strokec4 ,\cb1 \
\cb3         \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 getLastColumn\cf4 \strokec4 ());\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 rowValues\cf4 \strokec4  = \cf9 \strokec9 rowRange\cf4 \strokec4 .\cf9 \strokec9 getValues\cf4 \strokec4 ()[\cf10 \strokec10 0\cf4 \strokec4 ];\cb1 \
\
\cb3       \cf7 \strokec7 // Initialize tracking fields\cf4 \cb1 \strokec4 \
\cb3       \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 DAYS_OPEN\cf4 \strokec4 ] = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 calculateDaysOpen\cf4 \strokec4 (\cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 TIMESTAMP\cf4 \strokec4 ]);\cb1 \
\cb3       \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 COMPLETION\cf4 \strokec4 ] = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 calculateCompletion\cf4 \strokec4 (\cf9 \strokec9 docData\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf7 \strokec7 // Set up shipping tracking if needed\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 EXPECTED_SHIPPING_DATE\cf4 \strokec4 ]) \{\cb1 \
\cb3         \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 TIME_TO_SHIP\cf4 \strokec4 ] = \cf10 \strokec10 0\cf4 \strokec4 ;\cb1 \
\cb3         \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 SHIPPED\cf4 \strokec4 ] = \cf8 \strokec8 'N'\cf4 \strokec4 ;\cb1 \
\cb3       \}\cb1 \
\
\cb3       \cf7 \strokec7 // Set up customs tracking if needed\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 CUSTOMS_REQUIRED\cf4 \strokec4 ] === \cf8 \strokec8 'Y'\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 CUSTOMS_CLEARED\cf4 \strokec4 ] = \cf8 \strokec8 'N'\cf4 \strokec4 ;\cb1 \
\cb3         \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 TIME_IN_CUSTOMS\cf4 \strokec4 ] = \cf10 \strokec10 0\cf4 \strokec4 ;\cb1 \
\cb3       \}\cb1 \
\
\cb3       \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 GOODS_LANDED\cf4 \strokec4 ] = \cf8 \strokec8 'N'\cf4 \strokec4 ;\cb1 \
\cb3       \cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 TIME_TO_LAND\cf4 \strokec4 ] = \cf10 \strokec10 0\cf4 \strokec4 ;\cb1 \
\
\cb3       \cf9 \strokec9 rowRange\cf4 \strokec4 .\cf9 \strokec9 setValues\cf4 \strokec4 ([\cf9 \strokec9 rowValues\cf4 \strokec4 ]);\cb1 \
\cb3     \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 'Error initializing delivery tracking:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 `Failed to initialize delivery tracking: \cf4 \strokec4 $\{\cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3 \} \cf7 \strokec7 //end class\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Factory Functions and Global Handlers\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * ===================================\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Factory function for StatusWorkflowManager\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * ----------------------------------------\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Provides single entry point for other scripts to access workflow manager\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @returns \{StatusWorkflowManager\} New instance of workflow manager\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Usage:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * const workflow = getStatusWorkflowManager();\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * workflow.updateStatus(...);\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 getStatusWorkflowManager\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 return\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 StatusWorkflowManager\cf4 \strokec4 ();\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Automated Processing Functions\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * ============================\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Initializes triggers for automated status checks\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * ---------------------------------------------\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Should be run once during system setup\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Creates daily and hourly triggers for status monitoring\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 createStatusWorkflowTriggers\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3     \cf7 \strokec7 // Remove existing triggers\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 triggers\cf4 \strokec4  = \cf6 \strokec6 ScriptApp\cf4 \strokec4 .\cf9 \strokec9 getProjectTriggers\cf4 \strokec4 ();\cb1 \
\cb3     \cf9 \strokec9 triggers\cf4 \strokec4 .\cf9 \strokec9 forEach\cf4 \strokec4 (\cf9 \strokec9 trigger\cf4 \strokec4  => \{\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 trigger\cf4 \strokec4 .\cf9 \strokec9 getHandlerFunction\cf4 \strokec4 ().\cf9 \strokec9 startsWith\cf4 \strokec4 (\cf8 \strokec8 'processStatus'\cf4 \strokec4 )) \{\cb1 \
\cb3         \cf6 \strokec6 ScriptApp\cf4 \strokec4 .\cf9 \strokec9 deleteTrigger\cf4 \strokec4 (\cf9 \strokec9 trigger\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3     \});\cb1 \
\
\cb3     \cf7 \strokec7 // Create daily trigger for status checks\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 ScriptApp\cf4 \strokec4 .\cf9 \strokec9 newTrigger\cf4 \strokec4 (\cf8 \strokec8 'processStatusChecks'\cf4 \strokec4 )\cb1 \
\cb3       .\cf9 \strokec9 timeBased\cf4 \strokec4 ()\cb1 \
\cb3       .\cf9 \strokec9 everyDays\cf4 \strokec4 (\cf10 \strokec10 1\cf4 \strokec4 )\cb1 \
\cb3       .\cf9 \strokec9 atHour\cf4 \strokec4 (\cf10 \strokec10 1\cf4 \strokec4 )\cb1 \
\cb3       .\cf9 \strokec9 create\cf4 \strokec4 ();\cb1 \
\
\cb3     \cf7 \strokec7 // Create hourly trigger for urgent checks\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 ScriptApp\cf4 \strokec4 .\cf9 \strokec9 newTrigger\cf4 \strokec4 (\cf8 \strokec8 'processUrgentStatusChecks'\cf4 \strokec4 )\cb1 \
\cb3       .\cf9 \strokec9 timeBased\cf4 \strokec4 ()\cb1 \
\cb3       .\cf9 \strokec9 everyHours\cf4 \strokec4 (\cf10 \strokec10 1\cf4 \strokec4 )\cb1 \
\cb3       .\cf9 \strokec9 create\cf4 \strokec4 ();\cb1 \
\
\cb3     \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf8 \strokec8 'Status workflow triggers created successfully'\cf4 \strokec4 );\cb1 \
\cb3   \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 'Error creating status workflow triggers:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 `Failed to create status workflow triggers: \cf4 \strokec4 $\{\cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Daily automated status checks\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * --------------------------\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Handles overdue items and reminder scheduling\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Triggered daily at 1 AM\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 processStatusChecks\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf8 \strokec8 'Starting daily status checks'\cf4 \strokec4 );\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 workflow\cf4 \strokec4  = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 StatusWorkflowManager\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3     \cf7 \strokec7 // Process ordered items\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 processOrderedItems\cf4 \strokec4 (\cf9 \strokec9 workflow\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf7 \strokec7 // Check for auto-cancellation\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 processAutoCancellation\cf4 \strokec4 (\cf9 \strokec9 workflow\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf7 \strokec7 // Update completion percentages\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 updateAllCompletionPercentages\cf4 \strokec4 (\cf9 \strokec9 workflow\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf8 \strokec8 'Daily status checks completed successfully'\cf4 \strokec4 );\cb1 \
\cb3   \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 'Error in daily status checks:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3     \cf7 \strokec7 // Send alert to system administrators\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 NotificationSystem\cf4 \strokec4 .\cf9 \strokec9 sendNotification\cf4 \strokec4 (\cb1 \
\cb3       \cf8 \strokec8 'SYSTEM_ALERT'\cf4 \strokec4 ,\cb1 \
\cb3       \{\cb1 \
\cb3         \cf9 \strokec9 type\cf4 \strokec4 : \cf8 \strokec8 'Error'\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 process\cf4 \strokec4 : \cf8 \strokec8 'Daily Status Checks'\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 error\cf4 \strokec4 : \cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 timestamp\cf4 \strokec4 : \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Date\cf4 \strokec4 ()\cb1 \
\cb3       \},\cb1 \
\cb3       [\cf6 \strokec6 STATUS_WORKFLOW\cf4 \strokec4 .\cf6 \strokec6 SYSTEM_ADMIN_EMAIL\cf4 \strokec4 ]\cb1 \
\cb3     );\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Hourly urgent status checks\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * ------------------------\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Processes time-sensitive status updates\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Triggered every hour\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 processUrgentStatusChecks\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf8 \strokec8 'Starting urgent status checks'\cf4 \strokec4 );\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 workflow\cf4 \strokec4  = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 StatusWorkflowManager\cf4 \strokec4 ();\cb1 \
\
\cb3   \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3     \cf7 \strokec7 // Check overdue ordered items\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 checkOverdueOrders\cf4 \strokec4 (\cf9 \strokec9 workflow\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf7 \strokec7 // Process urgent reminders\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 processUrgentReminders\cf4 \strokec4 (\cf9 \strokec9 workflow\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf8 \strokec8 'Urgent status checks completed successfully'\cf4 \strokec4 );\cb1 \
\cb3   \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 'Error in urgent status checks:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3     \cf7 \strokec7 // Send alert to system administrators\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 NotificationSystem\cf4 \strokec4 .\cf9 \strokec9 sendNotification\cf4 \strokec4 (\cb1 \
\cb3       \cf8 \strokec8 'SYSTEM_ALERT'\cf4 \strokec4 ,\cb1 \
\cb3       \{\cb1 \
\cb3         \cf9 \strokec9 type\cf4 \strokec4 : \cf8 \strokec8 'Error'\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 process\cf4 \strokec4 : \cf8 \strokec8 'Urgent Status Checks'\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 error\cf4 \strokec4 : \cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 timestamp\cf4 \strokec4 : \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Date\cf4 \strokec4 ()\cb1 \
\cb3       \},\cb1 \
\cb3       [\cf6 \strokec6 STATUS_WORKFLOW\cf4 \strokec4 .\cf6 \strokec6 SYSTEM_ADMIN_EMAIL\cf4 \strokec4 ]\cb1 \
\cb3     );\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Status Processing Functions\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * =========================\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Implements specific business logic for status-based processing\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Processes items in Ordered status\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * ------------------------------\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Handles reminder scheduling and overdue checks for ordered items\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @param \{StatusWorkflowManager\} workflow - Workflow manager instance\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 processOrderedItems\cf4 \strokec4 (\cf9 \strokec9 workflow\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 sheet\cf4 \strokec4  = \cf9 \strokec9 workflow\cf4 \strokec4 .\cf9 \strokec9 masterSheet\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 data\cf4 \strokec4  = \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getDataRange\cf4 \strokec4 ().\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 headers\cf4 \strokec4  = \cf9 \strokec9 data\cf4 \strokec4 [\cf10 \strokec10 0\cf4 \strokec4 ];\cb1 \
\
\cb3     \cf7 \strokec7 // Find ordered items\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 i\cf4 \strokec4  = \cf10 \strokec10 1\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4  < \cf9 \strokec9 data\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4 ++) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 row\cf4 \strokec4  = \cf9 \strokec9 data\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ];\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 STATUS\cf4 \strokec4 ] !== \cf8 \strokec8 'Ordered'\cf4 \strokec4 ) \cf5 \strokec5 continue\cf4 \strokec4 ;\cb1 \
\
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 poNumber\cf4 \strokec4  = \cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PO_NUMBER\cf4 \strokec4 ];\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf8 \strokec8 `Processing ordered item: \cf4 \strokec4 $\{\cf9 \strokec9 poNumber\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\
\cb3       \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3         \cf7 \strokec7 // Check if landing date is set\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 expectedLandingDate\cf4 \strokec4  = \cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 EXPECTED_LANDING_DATE\cf4 \strokec4 ];\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 expectedLandingDate\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 warn\cf4 \strokec4 (\cf8 \strokec8 `No landing date for \cf4 \strokec4 $\{\cf9 \strokec9 poNumber\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3           \cf5 \strokec5 continue\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf7 \strokec7 // Calculate days overdue\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 daysOverdue\cf4 \strokec4  = \cf9 \strokec9 calculateDaysOverdue\cf4 \strokec4 (\cf9 \strokec9 expectedLandingDate\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 daysOverdue\cf4 \strokec4  > \cf10 \strokec10 0\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf9 \strokec9 handleOverdueOrder\cf4 \strokec4 (\{\cb1 \
\cb3             \cf9 \strokec9 poNumber\cf4 \strokec4 : \cf9 \strokec9 poNumber\cf4 \strokec4 ,\cb1 \
\cb3             \cf9 \strokec9 daysOverdue\cf4 \strokec4 : \cf9 \strokec9 daysOverdue\cf4 \strokec4 ,\cb1 \
\cb3             \cf9 \strokec9 rowIndex\cf4 \strokec4 : \cf9 \strokec9 i\cf4 \strokec4  + \cf10 \strokec10 1\cf4 \strokec4 ,\cb1 \
\cb3             \cf9 \strokec9 workflow\cf4 \strokec4 : \cf9 \strokec9 workflow\cf4 \strokec4 ,\cb1 \
\cb3             \cf9 \strokec9 poData\cf4 \strokec4 : \{\cb1 \
\cb3               \cf9 \strokec9 submitter\cf4 \strokec4 : \cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 REQUESTOR_NAME\cf4 \strokec4 ],\cb1 \
\cb3               \cf9 \strokec9 submitterEmail\cf4 \strokec4 : \cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 EMAIL\cf4 \strokec4 ],\cb1 \
\cb3               \cf9 \strokec9 approver\cf4 \strokec4 : \cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 APPROVER\cf4 \strokec4 ],\cb1 \
\cb3               \cf9 \strokec9 approverEmail\cf4 \strokec4 : \cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 APPROVER_EMAIL\cf4 \strokec4 ],\cb1 \
\cb3               \cf9 \strokec9 description\cf4 \strokec4 : \cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 DESCRIPTION\cf4 \strokec4 ]\cb1 \
\cb3             \}\cb1 \
\cb3           \});\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf7 \strokec7 // Update reminder schedule\cf4 \cb1 \strokec4 \
\cb3         \cf9 \strokec9 updateReminderSchedule\cf4 \strokec4 (\cf9 \strokec9 poNumber\cf4 \strokec4 , \cf9 \strokec9 daysOverdue\cf4 \strokec4 );\cb1 \
\
\cb3       \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 itemError\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 `Error processing ordered item \cf4 \strokec4 $\{\cf9 \strokec9 poNumber\cf4 \strokec4 \}\cf8 \strokec8 :`\cf4 \strokec4 , \cf9 \strokec9 itemError\cf4 \strokec4 );\cb1 \
\cb3         \cf7 \strokec7 // Continue with next item\cf4 \cb1 \strokec4 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3   \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 'Error in processOrderedItems:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 `Failed to process ordered items: \cf4 \strokec4 $\{\cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Handles overdue ordered items\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * --------------------------\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Manages notifications and auto-cancellation for overdue items\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @param \{Object\} params - Processing parameters\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @param \{string\} params.poNumber - PO number\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @param \{number\} params.daysOverdue - Number of days overdue\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @param \{number\} params.rowIndex - Sheet row index\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @param \{StatusWorkflowManager\} params.workflow - Workflow manager\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @param \{Object\} params.poData - PO data for notifications\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 handleOverdueOrder\cf4 \strokec4 (\cf9 \strokec9 params\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 const\cf4 \strokec4  \{ \cf9 \strokec9 poNumber\cf4 \strokec4 , \cf9 \strokec9 daysOverdue\cf4 \strokec4 , \cf9 \strokec9 rowIndex\cf4 \strokec4 , \cf9 \strokec9 workflow\cf4 \strokec4 , \cf9 \strokec9 poData\cf4 \strokec4  \} = \cf9 \strokec9 params\cf4 \strokec4 ;\cb1 \
\
\cb3   \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3     \cf7 \strokec7 // Check auto-cancellation threshold\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 daysOverdue\cf4 \strokec4  >= \cf6 \strokec6 STATUS_WORKFLOW\cf4 \strokec4 .\cf6 \strokec6 AUTO_CANCEL_DAYS\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf8 \strokec8 `Auto-canceling PO \cf4 \strokec4 $\{\cf9 \strokec9 poNumber\cf4 \strokec4 \}\cf8 \strokec8  - \cf4 \strokec4 $\{\cf9 \strokec9 daysOverdue\cf4 \strokec4 \}\cf8 \strokec8  days overdue`\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf7 \strokec7 // Update status to Canceled\cf4 \cb1 \strokec4 \
\cb3       \cf9 \strokec9 workflow\cf4 \strokec4 .\cf9 \strokec9 updateStatus\cf4 \strokec4 (\cb1 \
\cb3         \cf9 \strokec9 poNumber\cf4 \strokec4 , \cb1 \
\cb3         \cf8 \strokec8 'Canceled'\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 `Automatically canceled after \cf4 \strokec4 $\{\cf9 \strokec9 daysOverdue\cf4 \strokec4 \}\cf8 \strokec8  days overdue`\cf4 \strokec4 ,\cb1 \
\cb3         \cf5 \strokec5 true\cf4 \strokec4  \cf7 \strokec7 // Skip validation\cf4 \cb1 \strokec4 \
\cb3       );\cb1 \
\
\cb3     \} \cf5 \strokec5 else\cf4 \strokec4  \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 daysOverdue\cf4 \strokec4  >= \cf6 \strokec6 STATUS_WORKFLOW\cf4 \strokec4 .\cf6 \strokec6 AUTO_CANCEL_WARNING_DAYS\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf7 \strokec7 // Send warning notification\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 daysUntilCancel\cf4 \strokec4  = \cf6 \strokec6 STATUS_WORKFLOW\cf4 \strokec4 .\cf6 \strokec6 AUTO_CANCEL_DAYS\cf4 \strokec4  - \cf9 \strokec9 daysOverdue\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf6 \strokec6 NotificationSystem\cf4 \strokec4 .\cf9 \strokec9 sendNotification\cf4 \strokec4 (\cb1 \
\cb3         \cf8 \strokec8 'CANCELLATION_WARNING'\cf4 \strokec4 ,\cb1 \
\cb3         \{\cb1 \
\cb3           \cf9 \strokec9 poNumber\cf4 \strokec4 : \cf9 \strokec9 poNumber\cf4 \strokec4 ,\cb1 \
\cb3           \cf9 \strokec9 description\cf4 \strokec4 : \cf9 \strokec9 poData\cf4 \strokec4 .\cf9 \strokec9 description\cf4 \strokec4 ,\cb1 \
\cb3           \cf9 \strokec9 daysOverdue\cf4 \strokec4 : \cf9 \strokec9 daysOverdue\cf4 \strokec4 ,\cb1 \
\cb3           \cf9 \strokec9 daysUntilCancel\cf4 \strokec4 : \cf9 \strokec9 daysUntilCancel\cf4 \strokec4 ,\cb1 \
\cb3           \cf9 \strokec9 expectedLandingDate\cf4 \strokec4 : \cf9 \strokec9 workflow\cf4 \strokec4 .\cf9 \strokec9 findDocument\cf4 \strokec4 (\cf9 \strokec9 poNumber\cf4 \strokec4 ).\cf9 \strokec9 rowData\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 EXPECTED_LANDING_DATE\cf4 \strokec4 ],\cb1 \
\cb3           \cf9 \strokec9 updateLink\cf4 \strokec4 : \cf9 \strokec9 generateLandingDateUpdateLink\cf4 \strokec4 (\cf9 \strokec9 poNumber\cf4 \strokec4 )\cb1 \
\cb3         \},\cb1 \
\cb3         [\cb1 \
\cb3           \cf9 \strokec9 poData\cf4 \strokec4 .\cf9 \strokec9 submitterEmail\cf4 \strokec4 ,\cb1 \
\cb3           \cf9 \strokec9 poData\cf4 \strokec4 .\cf9 \strokec9 approverEmail\cf4 \strokec4 ,\cb1 \
\cb3           \cf6 \strokec6 STATUS_WORKFLOW\cf4 \strokec4 .\cf6 \strokec6 PROCUREMENT_EMAIL\cf4 \strokec4 ,\cb1 \
\cb3           \cf6 \strokec6 STATUS_WORKFLOW\cf4 \strokec4 .\cf6 \strokec6 FINANCE_EMAIL\cf4 \cb1 \strokec4 \
\cb3         ]\cb1 \
\cb3       );\cb1 \
\cb3     \}\cb1 \
\cb3   \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 `Error handling overdue order \cf4 \strokec4 $\{\cf9 \strokec9 poNumber\cf4 \strokec4 \}\cf8 \strokec8 :`\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 `Failed to handle overdue order: \cf4 \strokec4 $\{\cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Processes auto-cancellation checks\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * ------------------------------\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Identifies and handles items requiring auto-cancellation\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @param \{StatusWorkflowManager\} workflow - Workflow manager instance\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 processAutoCancellation\cf4 \strokec4 (\cf9 \strokec9 workflow\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 sheet\cf4 \strokec4  = \cf9 \strokec9 workflow\cf4 \strokec4 .\cf9 \strokec9 masterSheet\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 data\cf4 \strokec4  = \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getDataRange\cf4 \strokec4 ().\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\
\cb3     \cf7 \strokec7 // Find items in Ordered status\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 i\cf4 \strokec4  = \cf10 \strokec10 1\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4  < \cf9 \strokec9 data\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4 ++) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 row\cf4 \strokec4  = \cf9 \strokec9 data\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ];\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 STATUS\cf4 \strokec4 ] !== \cf8 \strokec8 'Ordered'\cf4 \strokec4 ) \cf5 \strokec5 continue\cf4 \strokec4 ;\cb1 \
\
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 poNumber\cf4 \strokec4  = \cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 PO_NUMBER\cf4 \strokec4 ];\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf8 \strokec8 `Checking auto-cancellation for \cf4 \strokec4 $\{\cf9 \strokec9 poNumber\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\
\cb3       \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 expectedLandingDate\cf4 \strokec4  = \cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 EXPECTED_LANDING_DATE\cf4 \strokec4 ];\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 expectedLandingDate\cf4 \strokec4 ) \cf5 \strokec5 continue\cf4 \strokec4 ;\cb1 \
\
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 daysOverdue\cf4 \strokec4  = \cf9 \strokec9 calculateDaysOverdue\cf4 \strokec4 (\cf9 \strokec9 expectedLandingDate\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 daysOverdue\cf4 \strokec4  >= \cf6 \strokec6 STATUS_WORKFLOW\cf4 \strokec4 .\cf6 \strokec6 AUTO_CANCEL_DAYS\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf7 \strokec7 // Auto-cancel the PO\cf4 \cb1 \strokec4 \
\cb3           \cf9 \strokec9 workflow\cf4 \strokec4 .\cf9 \strokec9 updateStatus\cf4 \strokec4 (\cb1 \
\cb3             \cf9 \strokec9 poNumber\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 'Canceled'\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 `Automatically canceled after \cf4 \strokec4 $\{\cf9 \strokec9 daysOverdue\cf4 \strokec4 \}\cf8 \strokec8  days overdue`\cf4 \strokec4 ,\cb1 \
\cb3             \cf5 \strokec5 true\cf4 \strokec4  \cf7 \strokec7 // Skip validation\cf4 \cb1 \strokec4 \
\cb3           );\cb1 \
\cb3         \}\cb1 \
\cb3       \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 itemError\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 `Error processing auto-cancellation for \cf4 \strokec4 $\{\cf9 \strokec9 poNumber\cf4 \strokec4 \}\cf8 \strokec8 :`\cf4 \strokec4 , \cf9 \strokec9 itemError\cf4 \strokec4 );\cb1 \
\cb3         \cf7 \strokec7 // Continue with next item\cf4 \cb1 \strokec4 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3   \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 'Error in processAutoCancellation:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 `Failed to process auto-cancellation: \cf4 \strokec4 $\{\cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Updates completion percentages for all active POs\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * --------------------------------------------\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Recalculates completion percentages for reporting\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @param \{StatusWorkflowManager\} workflow - Workflow manager instance\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 updateAllCompletionPercentages\cf4 \strokec4 (\cf9 \strokec9 workflow\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 sheet\cf4 \strokec4  = \cf9 \strokec9 workflow\cf4 \strokec4 .\cf9 \strokec9 masterSheet\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 data\cf4 \strokec4  = \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getDataRange\cf4 \strokec4 ().\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\
\cb3     \cf7 \strokec7 // Process all active POs\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 i\cf4 \strokec4  = \cf10 \strokec10 1\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4  < \cf9 \strokec9 data\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4 ++) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 row\cf4 \strokec4  = \cf9 \strokec9 data\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ];\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 status\cf4 \strokec4  = \cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COL\cf4 \strokec4 .\cf6 \strokec6 STATUS\cf4 \strokec4 ];\cb1 \
\
\cb3       \cf7 \strokec7 // Skip completed/canceled POs\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  ([\cf8 \strokec8 'Completed'\cf4 \strokec4 , \cf8 \strokec8 'Canceled'\cf4 \strokec4 , \cf8 \strokec8 'Rejected'\cf4 \strokec4 ].\cf9 \strokec9 includes\cf4 \strokec4 (\cf9 \strokec9 status\cf4 \strokec4 )) \cf5 \strokec5 continue\cf4 \strokec4 ;\cb1 \
\
\cb3       \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3         \cf9 \strokec9 workflow\cf4 \strokec4 .\cf9 \strokec9 updateCompletionPercentage\cf4 \strokec4 (\cf9 \strokec9 i\cf4 \strokec4  + \cf10 \strokec10 1\cf4 \strokec4 );\cb1 \
\cb3       \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 itemError\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 `Error updating completion for row \cf4 \strokec4 $\{\cf9 \strokec9 i\cf4 \strokec4  + \cf10 \strokec10 1\cf4 \strokec4 \}\cf8 \strokec8 :`\cf4 \strokec4 , \cf9 \strokec9 itemError\cf4 \strokec4 );\cb1 \
\cb3         \cf7 \strokec7 // Continue with next item\cf4 \cb1 \strokec4 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3   \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf8 \strokec8 'Error in updateAllCompletionPercentages:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf8 \strokec8 `Failed to update completion percentages: \cf4 \strokec4 $\{\cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Utility Functions\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * ===============\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Calculates days overdue for a landing date\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * --------------------------------------\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @param \{Date\} expectedLandingDate - Expected landing date\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @returns \{number\} Number of business days overdue (negative if not overdue)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 calculateDaysOverdue\cf4 \strokec4 (\cf9 \strokec9 expectedLandingDate\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 expectedLandingDate\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4  \cf10 \strokec10 0\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 today\cf4 \strokec4  = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Date\cf4 \strokec4 ();\cb1 \
\cb3   \cf9 \strokec9 today\cf4 \strokec4 .\cf9 \strokec9 setHours\cf4 \strokec4 (\cf10 \strokec10 0\cf4 \strokec4 , \cf10 \strokec10 0\cf4 \strokec4 , \cf10 \strokec10 0\cf4 \strokec4 , \cf10 \strokec10 0\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 expected\cf4 \strokec4  = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Date\cf4 \strokec4 (\cf9 \strokec9 expectedLandingDate\cf4 \strokec4 );\cb1 \
\cb3   \cf9 \strokec9 expected\cf4 \strokec4 .\cf9 \strokec9 setHours\cf4 \strokec4 (\cf10 \strokec10 0\cf4 \strokec4 , \cf10 \strokec10 0\cf4 \strokec4 , \cf10 \strokec10 0\cf4 \strokec4 , \cf10 \strokec10 0\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 expected\cf4 \strokec4  >= \cf9 \strokec9 today\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4  \cf10 \strokec10 0\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 calculateBusinessDays\cf4 \strokec4 (\cf9 \strokec9 expected\cf4 \strokec4 , \cf9 \strokec9 today\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Calculates business days between dates\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * ----------------------------------\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @param \{Date\} startDate - Start date\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @param \{Date\} endDate - End date\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @returns \{number\} Number of business days\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 calculateBusinessDays\cf4 \strokec4 (\cf9 \strokec9 startDate\cf4 \strokec4 , \cf9 \strokec9 endDate\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 count\cf4 \strokec4  = \cf10 \strokec10 0\cf4 \strokec4 ;\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 current\cf4 \strokec4  = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Date\cf4 \strokec4 (\cf9 \strokec9 startDate\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 while\cf4 \strokec4  (\cf9 \strokec9 current\cf4 \strokec4  <= \cf9 \strokec9 endDate\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf7 \strokec7 // Skip weekends (0 = Sunday, 6 = Saturday)\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 current\cf4 \strokec4 .\cf9 \strokec9 getDay\cf4 \strokec4 () !== \cf10 \strokec10 0\cf4 \strokec4  && \cf9 \strokec9 current\cf4 \strokec4 .\cf9 \strokec9 getDay\cf4 \strokec4 () !== \cf10 \strokec10 6\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 count\cf4 \strokec4 ++;\cb1 \
\cb3     \}\cb1 \
\cb3     \cf9 \strokec9 current\cf4 \strokec4 .\cf9 \strokec9 setDate\cf4 \strokec4 (\cf9 \strokec9 current\cf4 \strokec4 .\cf9 \strokec9 getDate\cf4 \strokec4 () + \cf10 \strokec10 1\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 count\cf4 \strokec4 ;\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Generates a landing date update link\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @param \{string\} poNumber - PO number\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @returns \{string\} Landing date update URL\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * @private\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 generateLandingDateUpdateLink\cf4 \strokec4 (\cf9 \strokec9 poNumber\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 baseUrl\cf4 \strokec4  = \cf6 \strokec6 ScriptApp\cf4 \strokec4 .\cf9 \strokec9 getService\cf4 \strokec4 ().\cf9 \strokec9 getUrl\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 return\cf4 \strokec4  \cf8 \strokec8 `\cf4 \strokec4 $\{\cf9 \strokec9 baseUrl\cf4 \strokec4 \}\cf8 \strokec8 ?action=updateLandingDate&doc=\cf4 \strokec4 $\{\cf9 \strokec9 encodeURIComponent\cf4 \strokec4 (\cf9 \strokec9 poNumber\cf4 \strokec4 )\}\cf8 \strokec8 `\cf4 \strokec4 ;\cb1 \
\cb3 \}\cb1 \
\
}